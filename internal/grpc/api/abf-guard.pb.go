// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/abf-guard.proto

package abf_guard

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TODO: complete comments!
// AuthorisationRequest .
type AuthorisationRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthorisationRequest) Reset()         { *m = AuthorisationRequest{} }
func (m *AuthorisationRequest) String() string { return proto.CompactTextString(m) }
func (*AuthorisationRequest) ProtoMessage()    {}
func (*AuthorisationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d920cdee07ab3e, []int{0}
}

func (m *AuthorisationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthorisationRequest.Unmarshal(m, b)
}
func (m *AuthorisationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthorisationRequest.Marshal(b, m, deterministic)
}
func (m *AuthorisationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorisationRequest.Merge(m, src)
}
func (m *AuthorisationRequest) XXX_Size() int {
	return xxx_messageInfo_AuthorisationRequest.Size(m)
}
func (m *AuthorisationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorisationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorisationRequest proto.InternalMessageInfo

func (m *AuthorisationRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *AuthorisationRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AuthorisationRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// SimpleResponse .
type SimpleResponse struct {
	// Types that are valid to be assigned to Result:
	//	*SimpleResponse_Ok
	//	*SimpleResponse_Error
	Result               isSimpleResponse_Result `protobuf_oneof:"result"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SimpleResponse) Reset()         { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()    {}
func (*SimpleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d920cdee07ab3e, []int{1}
}

func (m *SimpleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleResponse.Unmarshal(m, b)
}
func (m *SimpleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleResponse.Marshal(b, m, deterministic)
}
func (m *SimpleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleResponse.Merge(m, src)
}
func (m *SimpleResponse) XXX_Size() int {
	return xxx_messageInfo_SimpleResponse.Size(m)
}
func (m *SimpleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleResponse proto.InternalMessageInfo

type isSimpleResponse_Result interface {
	isSimpleResponse_Result()
}

type SimpleResponse_Ok struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3,oneof"`
}

type SimpleResponse_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*SimpleResponse_Ok) isSimpleResponse_Result() {}

func (*SimpleResponse_Error) isSimpleResponse_Result() {}

func (m *SimpleResponse) GetResult() isSimpleResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SimpleResponse) GetOk() bool {
	if x, ok := m.GetResult().(*SimpleResponse_Ok); ok {
		return x.Ok
	}
	return false
}

func (m *SimpleResponse) GetError() string {
	if x, ok := m.GetResult().(*SimpleResponse_Error); ok {
		return x.Error
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SimpleResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SimpleResponse_Ok)(nil),
		(*SimpleResponse_Error)(nil),
	}
}

// FlashBucketRequest .
type FlashBucketRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlashBucketRequest) Reset()         { *m = FlashBucketRequest{} }
func (m *FlashBucketRequest) String() string { return proto.CompactTextString(m) }
func (*FlashBucketRequest) ProtoMessage()    {}
func (*FlashBucketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d920cdee07ab3e, []int{2}
}

func (m *FlashBucketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlashBucketRequest.Unmarshal(m, b)
}
func (m *FlashBucketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlashBucketRequest.Marshal(b, m, deterministic)
}
func (m *FlashBucketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlashBucketRequest.Merge(m, src)
}
func (m *FlashBucketRequest) XXX_Size() int {
	return xxx_messageInfo_FlashBucketRequest.Size(m)
}
func (m *FlashBucketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlashBucketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlashBucketRequest proto.InternalMessageInfo

func (m *FlashBucketRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *FlashBucketRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// SubnetRequest .
type SubnetRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubnetRequest) Reset()         { *m = SubnetRequest{} }
func (m *SubnetRequest) String() string { return proto.CompactTextString(m) }
func (*SubnetRequest) ProtoMessage()    {}
func (*SubnetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d920cdee07ab3e, []int{3}
}

func (m *SubnetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubnetRequest.Unmarshal(m, b)
}
func (m *SubnetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubnetRequest.Marshal(b, m, deterministic)
}
func (m *SubnetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetRequest.Merge(m, src)
}
func (m *SubnetRequest) XXX_Size() int {
	return xxx_messageInfo_SubnetRequest.Size(m)
}
func (m *SubnetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetRequest proto.InternalMessageInfo

func (m *SubnetRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *SubnetRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthorisationRequest)(nil), "AuthorisationRequest")
	proto.RegisterType((*SimpleResponse)(nil), "SimpleResponse")
	proto.RegisterType((*FlashBucketRequest)(nil), "FlashBucketRequest")
	proto.RegisterType((*SubnetRequest)(nil), "SubnetRequest")
}

func init() { proto.RegisterFile("api/abf-guard.proto", fileDescriptor_79d920cdee07ab3e) }

var fileDescriptor_79d920cdee07ab3e = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4d, 0x4f, 0xf2, 0x40,
	0x14, 0x85, 0x61, 0xde, 0x40, 0x78, 0xaf, 0xe1, 0x23, 0x03, 0x18, 0xc2, 0xca, 0x74, 0xe5, 0xc6,
	0x9a, 0x68, 0x58, 0xc8, 0x8e, 0x86, 0x20, 0x6c, 0x8b, 0x89, 0x6e, 0x07, 0x7a, 0x85, 0x49, 0x87,
	0xde, 0x71, 0x3e, 0xf4, 0x37, 0xfb, 0x2f, 0x8c, 0x6d, 0x82, 0x12, 0x1b, 0x93, 0xba, 0x3c, 0x33,
	0x79, 0xee, 0x3d, 0xe7, 0xe4, 0x42, 0x5f, 0x68, 0x79, 0x2d, 0x36, 0xcf, 0x57, 0x3b, 0x2f, 0x4c,
	0x12, 0x6a, 0x43, 0x8e, 0x82, 0x27, 0x18, 0xcc, 0xbc, 0xdb, 0x93, 0x91, 0x56, 0x38, 0x49, 0x59,
	0x8c, 0x2f, 0x1e, 0xad, 0xe3, 0x03, 0x68, 0x28, 0xda, 0xc9, 0x6c, 0x54, 0xbf, 0xa8, 0x5f, 0xfe,
	0x8f, 0x0b, 0xc1, 0xc7, 0xd0, 0xd2, 0xc2, 0xda, 0x37, 0x32, 0xc9, 0x88, 0xe5, 0x1f, 0x47, 0xcd,
	0x3b, 0xc0, 0xa4, 0x1e, 0xfd, 0xcb, 0x5f, 0x99, 0xd4, 0xc1, 0x1c, 0x3a, 0x6b, 0x79, 0xd0, 0x0a,
	0x63, 0xb4, 0x9a, 0x32, 0x8b, 0xbc, 0x07, 0x8c, 0xd2, 0x7c, 0x60, 0x6b, 0x59, 0x8b, 0x19, 0xa5,
	0xfc, 0x1c, 0x1a, 0x68, 0x0c, 0x99, 0x62, 0xd8, 0xb2, 0x16, 0x17, 0x32, 0x6a, 0x41, 0xd3, 0xa0,
	0xf5, 0xca, 0x05, 0x53, 0xe0, 0x0b, 0x25, 0xec, 0x3e, 0xf2, 0xdb, 0x14, 0xdd, 0xef, 0xee, 0x0a,
	0x07, 0xec, 0xe8, 0x60, 0x02, 0xed, 0xb5, 0xdf, 0x64, 0x15, 0xb1, 0x9b, 0x77, 0x06, 0xdd, 0x59,
	0xb4, 0xb8, 0xff, 0x6c, 0x69, 0x8d, 0xe6, 0x55, 0x6e, 0x91, 0xdf, 0x41, 0xfb, 0xa4, 0x26, 0x3e,
	0x0c, 0xcb, 0x6a, 0x1b, 0x77, 0xc3, 0xd3, 0xcc, 0x41, 0x8d, 0x4f, 0xe0, 0xec, 0x5b, 0x02, 0xde,
	0x0f, 0x7f, 0xe6, 0x29, 0xc7, 0x7a, 0xb3, 0x24, 0x59, 0xe9, 0x07, 0x7a, 0xdc, 0x4b, 0x87, 0x4a,
	0x5a, 0xc7, 0x3b, 0xe1, 0x49, 0x9e, 0x32, 0x6c, 0x0a, 0xc3, 0x39, 0x2a, 0x74, 0xb8, 0xd2, 0x0b,
	0x43, 0x87, 0x4a, 0xec, 0xd7, 0xca, 0x48, 0x89, 0x6d, 0xfa, 0xc7, 0x95, 0x55, 0xd8, 0x4d, 0x33,
	0xbf, 0xc2, 0xdb, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x01, 0x16, 0x5b, 0x9c, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ABFGuardServiceClient is the client API for ABFGuardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ABFGuardServiceClient interface {
	// Authorisation .
	Authorisation(ctx context.Context, in *AuthorisationRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// FlashBucket .
	FlashBucket(ctx context.Context, in *FlashBucketRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// AddIpToWhitelist .
	AddIpToWhitelist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// DeleteIpFromWhitelist .
	DeleteIpFromWhitelist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// AddIpToBlacklist .
	AddIpToBlacklist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// DeleteIpFromBlacklist .
	DeleteIpFromBlacklist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
}

type aBFGuardServiceClient struct {
	cc *grpc.ClientConn
}

func NewABFGuardServiceClient(cc *grpc.ClientConn) ABFGuardServiceClient {
	return &aBFGuardServiceClient{cc}
}

func (c *aBFGuardServiceClient) Authorisation(ctx context.Context, in *AuthorisationRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/ABFGuardService/Authorisation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFGuardServiceClient) FlashBucket(ctx context.Context, in *FlashBucketRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/ABFGuardService/FlashBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFGuardServiceClient) AddIpToWhitelist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/ABFGuardService/AddIpToWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFGuardServiceClient) DeleteIpFromWhitelist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/ABFGuardService/DeleteIpFromWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFGuardServiceClient) AddIpToBlacklist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/ABFGuardService/AddIpToBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFGuardServiceClient) DeleteIpFromBlacklist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/ABFGuardService/DeleteIpFromBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ABFGuardServiceServer is the server API for ABFGuardService service.
type ABFGuardServiceServer interface {
	// Authorisation .
	Authorisation(context.Context, *AuthorisationRequest) (*SimpleResponse, error)
	// FlashBucket .
	FlashBucket(context.Context, *FlashBucketRequest) (*SimpleResponse, error)
	// AddIpToWhitelist .
	AddIpToWhitelist(context.Context, *SubnetRequest) (*SimpleResponse, error)
	// DeleteIpFromWhitelist .
	DeleteIpFromWhitelist(context.Context, *SubnetRequest) (*SimpleResponse, error)
	// AddIpToBlacklist .
	AddIpToBlacklist(context.Context, *SubnetRequest) (*SimpleResponse, error)
	// DeleteIpFromBlacklist .
	DeleteIpFromBlacklist(context.Context, *SubnetRequest) (*SimpleResponse, error)
}

// UnimplementedABFGuardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedABFGuardServiceServer struct {
}

func (*UnimplementedABFGuardServiceServer) Authorisation(ctx context.Context, req *AuthorisationRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorisation not implemented")
}
func (*UnimplementedABFGuardServiceServer) FlashBucket(ctx context.Context, req *FlashBucketRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlashBucket not implemented")
}
func (*UnimplementedABFGuardServiceServer) AddIpToWhitelist(ctx context.Context, req *SubnetRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIpToWhitelist not implemented")
}
func (*UnimplementedABFGuardServiceServer) DeleteIpFromWhitelist(ctx context.Context, req *SubnetRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpFromWhitelist not implemented")
}
func (*UnimplementedABFGuardServiceServer) AddIpToBlacklist(ctx context.Context, req *SubnetRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIpToBlacklist not implemented")
}
func (*UnimplementedABFGuardServiceServer) DeleteIpFromBlacklist(ctx context.Context, req *SubnetRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpFromBlacklist not implemented")
}

func RegisterABFGuardServiceServer(s *grpc.Server, srv ABFGuardServiceServer) {
	s.RegisterService(&_ABFGuardService_serviceDesc, srv)
}

func _ABFGuardService_Authorisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFGuardServiceServer).Authorisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFGuardService/Authorisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFGuardServiceServer).Authorisation(ctx, req.(*AuthorisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFGuardService_FlashBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlashBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFGuardServiceServer).FlashBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFGuardService/FlashBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFGuardServiceServer).FlashBucket(ctx, req.(*FlashBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFGuardService_AddIpToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFGuardServiceServer).AddIpToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFGuardService/AddIpToWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFGuardServiceServer).AddIpToWhitelist(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFGuardService_DeleteIpFromWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFGuardServiceServer).DeleteIpFromWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFGuardService/DeleteIpFromWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFGuardServiceServer).DeleteIpFromWhitelist(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFGuardService_AddIpToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFGuardServiceServer).AddIpToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFGuardService/AddIpToBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFGuardServiceServer).AddIpToBlacklist(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFGuardService_DeleteIpFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFGuardServiceServer).DeleteIpFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFGuardService/DeleteIpFromBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFGuardServiceServer).DeleteIpFromBlacklist(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ABFGuardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ABFGuardService",
	HandlerType: (*ABFGuardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorisation",
			Handler:    _ABFGuardService_Authorisation_Handler,
		},
		{
			MethodName: "FlashBucket",
			Handler:    _ABFGuardService_FlashBucket_Handler,
		},
		{
			MethodName: "AddIpToWhitelist",
			Handler:    _ABFGuardService_AddIpToWhitelist_Handler,
		},
		{
			MethodName: "DeleteIpFromWhitelist",
			Handler:    _ABFGuardService_DeleteIpFromWhitelist_Handler,
		},
		{
			MethodName: "AddIpToBlacklist",
			Handler:    _ABFGuardService_AddIpToBlacklist_Handler,
		},
		{
			MethodName: "DeleteIpFromBlacklist",
			Handler:    _ABFGuardService_DeleteIpFromBlacklist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/abf-guard.proto",
}

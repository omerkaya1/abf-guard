// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/abf-guard.proto

package abf_guard

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc2 "github.com/omerkaya1/abf-guard/internal/grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// AuthorisationRequest is a message that is being send while trying to log in to a resource
type AuthorisationRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Ip                   string   `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthorisationRequest) Reset()         { *m = AuthorisationRequest{} }
func (m *AuthorisationRequest) String() string { return proto.CompactTextString(m) }
func (*AuthorisationRequest) ProtoMessage()    {}
func (*AuthorisationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d920cdee07ab3e, []int{0}
}

func (m *AuthorisationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthorisationRequest.Unmarshal(m, b)
}
func (m *AuthorisationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthorisationRequest.Marshal(b, m, deterministic)
}
func (m *AuthorisationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorisationRequest.Merge(m, src)
}
func (m *AuthorisationRequest) XXX_Size() int {
	return xxx_messageInfo_AuthorisationRequest.Size(m)
}
func (m *AuthorisationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorisationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorisationRequest proto.InternalMessageInfo

func (m *AuthorisationRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *AuthorisationRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AuthorisationRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// Response is a return message that is used by all rpc methods; returns either a boolean response or an error
type Response struct {
	// Types that are valid to be assigned to Result:
	//	*Response_Ok
	//	*Response_Error
	Result               isResponse_Result `protobuf_oneof:"result"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d920cdee07ab3e, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

type isResponse_Result interface {
	isResponse_Result()
}

type Response_Ok struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3,oneof"`
}

type Response_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*Response_Ok) isResponse_Result() {}

func (*Response_Error) isResponse_Result() {}

func (m *Response) GetResult() isResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Response) GetOk() bool {
	if x, ok := m.GetResult().(*Response_Ok); ok {
		return x.Ok
	}
	return false
}

func (m *Response) GetError() string {
	if x, ok := m.GetResult().(*Response_Error); ok {
		return x.Error
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Response) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Response_Ok)(nil),
		(*Response_Error)(nil),
	}
}

// FlushBucketRequest is a message that contains information on a bucket that needs to be flashed
type FlushBucketRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlushBucketRequest) Reset()         { *m = FlushBucketRequest{} }
func (m *FlushBucketRequest) String() string { return proto.CompactTextString(m) }
func (*FlushBucketRequest) ProtoMessage()    {}
func (*FlushBucketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d920cdee07ab3e, []int{2}
}

func (m *FlushBucketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlushBucketRequest.Unmarshal(m, b)
}
func (m *FlushBucketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlushBucketRequest.Marshal(b, m, deterministic)
}
func (m *FlushBucketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushBucketRequest.Merge(m, src)
}
func (m *FlushBucketRequest) XXX_Size() int {
	return xxx_messageInfo_FlushBucketRequest.Size(m)
}
func (m *FlushBucketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushBucketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlushBucketRequest proto.InternalMessageInfo

func (m *FlushBucketRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *FlushBucketRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// SubnetRequest is a message that is used to request black and white lists actions
type SubnetRequest struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	List                 bool     `protobuf:"varint,2,opt,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubnetRequest) Reset()         { *m = SubnetRequest{} }
func (m *SubnetRequest) String() string { return proto.CompactTextString(m) }
func (*SubnetRequest) ProtoMessage()    {}
func (*SubnetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d920cdee07ab3e, []int{3}
}

func (m *SubnetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubnetRequest.Unmarshal(m, b)
}
func (m *SubnetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubnetRequest.Marshal(b, m, deterministic)
}
func (m *SubnetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubnetRequest.Merge(m, src)
}
func (m *SubnetRequest) XXX_Size() int {
	return xxx_messageInfo_SubnetRequest.Size(m)
}
func (m *SubnetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubnetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubnetRequest proto.InternalMessageInfo

func (m *SubnetRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SubnetRequest) GetList() bool {
	if m != nil {
		return m.List
	}
	return false
}

// SubnetRequest is a message that is used to request black and white lists actions
type ListRequest struct {
	ListType             bool     `protobuf:"varint,1,opt,name=listType,proto3" json:"listType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}
func (*ListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d920cdee07ab3e, []int{4}
}

func (m *ListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequest.Unmarshal(m, b)
}
func (m *ListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequest.Marshal(b, m, deterministic)
}
func (m *ListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequest.Merge(m, src)
}
func (m *ListRequest) XXX_Size() int {
	return xxx_messageInfo_ListRequest.Size(m)
}
func (m *ListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequest proto.InternalMessageInfo

func (m *ListRequest) GetListType() bool {
	if m != nil {
		return m.ListType
	}
	return false
}

// IpList is a message that holds all the IP addresses stored either in the whitelist or the blacklist
type IpList struct {
	List                 []string `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IpList) Reset()         { *m = IpList{} }
func (m *IpList) String() string { return proto.CompactTextString(m) }
func (*IpList) ProtoMessage()    {}
func (*IpList) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d920cdee07ab3e, []int{5}
}

func (m *IpList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpList.Unmarshal(m, b)
}
func (m *IpList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpList.Marshal(b, m, deterministic)
}
func (m *IpList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpList.Merge(m, src)
}
func (m *IpList) XXX_Size() int {
	return xxx_messageInfo_IpList.Size(m)
}
func (m *IpList) XXX_DiscardUnknown() {
	xxx_messageInfo_IpList.DiscardUnknown(m)
}

var xxx_messageInfo_IpList proto.InternalMessageInfo

func (m *IpList) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

// SubnetRequest is a message that is used to request black and white lists actions
type ListResponse struct {
	// Types that are valid to be assigned to Result:
	//	*ListResponse_Ips
	//	*ListResponse_Error
	Result               isListResponse_Result `protobuf_oneof:"result"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}
func (*ListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d920cdee07ab3e, []int{6}
}

func (m *ListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListResponse.Unmarshal(m, b)
}
func (m *ListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListResponse.Marshal(b, m, deterministic)
}
func (m *ListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListResponse.Merge(m, src)
}
func (m *ListResponse) XXX_Size() int {
	return xxx_messageInfo_ListResponse.Size(m)
}
func (m *ListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListResponse proto.InternalMessageInfo

type isListResponse_Result interface {
	isListResponse_Result()
}

type ListResponse_Ips struct {
	Ips *IpList `protobuf:"bytes,1,opt,name=ips,proto3,oneof"`
}

type ListResponse_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*ListResponse_Ips) isListResponse_Result() {}

func (*ListResponse_Error) isListResponse_Result() {}

func (m *ListResponse) GetResult() isListResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ListResponse) GetIps() *IpList {
	if x, ok := m.GetResult().(*ListResponse_Ips); ok {
		return x.Ips
	}
	return nil
}

func (m *ListResponse) GetError() string {
	if x, ok := m.GetResult().(*ListResponse_Error); ok {
		return x.Error
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListResponse_Ips)(nil),
		(*ListResponse_Error)(nil),
	}
}

func init() {
	proto.RegisterType((*AuthorisationRequest)(nil), "AuthorisationRequest")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterType((*FlushBucketRequest)(nil), "FlushBucketRequest")
	proto.RegisterType((*SubnetRequest)(nil), "SubnetRequest")
	proto.RegisterType((*ListRequest)(nil), "ListRequest")
	proto.RegisterType((*IpList)(nil), "IpList")
	proto.RegisterType((*ListResponse)(nil), "ListResponse")
}

func init() { proto.RegisterFile("api/abf-guard.proto", fileDescriptor_79d920cdee07ab3e) }

var fileDescriptor_79d920cdee07ab3e = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x5d, 0xef, 0xd2, 0x30,
	0x14, 0xc6, 0xb7, 0x21, 0xb8, 0x1d, 0x5e, 0x24, 0x05, 0x0c, 0x99, 0x5e, 0x90, 0x5d, 0xa1, 0x89,
	0x25, 0x01, 0xaf, 0xbc, 0x30, 0x61, 0x31, 0xbc, 0x24, 0x7a, 0x53, 0x48, 0xf4, 0x76, 0xb0, 0x0a,
	0xcd, 0xe6, 0x5a, 0xdb, 0x4e, 0xe3, 0xc7, 0xf6, 0x1b, 0x98, 0xad, 0x30, 0x40, 0x8d, 0xf2, 0xbf,
	0xdb, 0x39, 0x3b, 0xbf, 0xe7, 0xbc, 0x3c, 0x29, 0xf4, 0x22, 0xc1, 0x26, 0xd1, 0xee, 0xf3, 0xab,
	0x43, 0x1e, 0xc9, 0x18, 0x0b, 0xc9, 0x35, 0x0f, 0x3e, 0x41, 0x7f, 0x9e, 0xeb, 0x23, 0x97, 0x4c,
	0x45, 0x9a, 0xf1, 0x8c, 0xd0, 0xaf, 0x39, 0x55, 0x1a, 0xf5, 0xa1, 0x9e, 0xf2, 0x03, 0xcb, 0x86,
	0xf6, 0xc8, 0x1e, 0x7b, 0xc4, 0x04, 0xc8, 0x07, 0x57, 0x44, 0x4a, 0x7d, 0xe7, 0x32, 0x1e, 0x3a,
	0xe5, 0x8f, 0x2a, 0x46, 0x1d, 0x70, 0x98, 0x18, 0xd6, 0xca, 0xac, 0xc3, 0x44, 0xf0, 0x16, 0x5c,
	0x42, 0x95, 0xe0, 0x99, 0xa2, 0xa8, 0x0b, 0x0e, 0x4f, 0x4a, 0x29, 0x77, 0x65, 0x11, 0x87, 0x27,
	0xe8, 0x29, 0xd4, 0xa9, 0x94, 0x5c, 0x1a, 0x99, 0x95, 0x45, 0x4c, 0x18, 0xba, 0xd0, 0x90, 0x54,
	0xe5, 0xa9, 0x0e, 0xde, 0x00, 0x5a, 0xa4, 0xb9, 0x3a, 0x86, 0xf9, 0x3e, 0xa1, 0xfa, 0xdf, 0x73,
	0x99, 0xde, 0x4e, 0xd5, 0x7b, 0x06, 0xed, 0x4d, 0xbe, 0xcb, 0x2e, 0x98, 0x29, 0xb0, 0xcf, 0x05,
	0x08, 0xc1, 0xa3, 0x94, 0x29, 0x5d, 0x22, 0x2e, 0x29, 0xbf, 0x83, 0x17, 0xd0, 0x7c, 0xcf, 0x54,
	0x85, 0xf8, 0xe0, 0x16, 0xe9, 0xed, 0x0f, 0x41, 0xcd, 0xe4, 0xa4, 0x8a, 0x83, 0xe7, 0xd0, 0x58,
	0x8b, 0xa2, 0xb8, 0x12, 0xb2, 0x47, 0xb5, 0xb1, 0x77, 0x12, 0xfa, 0x00, 0x2d, 0x23, 0x74, 0xda,
	0xfe, 0x19, 0xd4, 0x98, 0x50, 0xa5, 0x48, 0x73, 0xfa, 0x18, 0x1b, 0x72, 0x65, 0x91, 0x22, 0xfb,
	0xff, 0x43, 0x4c, 0x7f, 0x3a, 0xf0, 0x64, 0x1e, 0x2e, 0x96, 0x85, 0x6b, 0x1b, 0x2a, 0xbf, 0xb1,
	0x3d, 0x45, 0x33, 0x68, 0xdf, 0xd8, 0x86, 0x06, 0xf8, 0x6f, 0x36, 0xfa, 0x1e, 0x3e, 0x4f, 0x11,
	0x58, 0x68, 0x02, 0xcd, 0xab, 0x8b, 0xa2, 0x1e, 0xfe, 0xf3, 0xbe, 0xbf, 0x03, 0xdd, 0x79, 0x1c,
	0xaf, 0xc5, 0x96, 0x7f, 0x3c, 0x32, 0x4d, 0x8b, 0xe5, 0x50, 0x07, 0xdf, 0x5c, 0xf6, 0x16, 0x78,
	0x0d, 0x83, 0x77, 0x34, 0xa5, 0x9a, 0xae, 0xc5, 0x42, 0xf2, 0x2f, 0x77, 0x52, 0x97, 0x36, 0x61,
	0x1a, 0xed, 0x93, 0x07, 0xb7, 0xb9, 0x93, 0x7a, 0x09, 0xde, 0x92, 0xea, 0x93, 0x6f, 0x2d, 0x7c,
	0xe5, 0xb5, 0xdf, 0xc6, 0xd7, 0x86, 0x05, 0xd6, 0xae, 0x51, 0xbe, 0x8e, 0xd9, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xcc, 0xe1, 0x3e, 0xf6, 0x34, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ABFGuardServiceClient is the client API for ABFGuardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ABFGuardServiceClient interface {
	// Authorisation .
	Authorisation(ctx context.Context, in *AuthorisationRequest, opts ...grpc.CallOption) (*Response, error)
	// FlashBucket .
	FlushBucket(ctx context.Context, in *FlushBucketRequest, opts ...grpc.CallOption) (*Response, error)
	// AddIpToWhitelist .
	AddIpToWhitelist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*Response, error)
	// DeleteIpFromWhitelist .
	DeleteIpFromWhitelist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*Response, error)
	// AddIpToBlacklist .
	AddIpToBlacklist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*Response, error)
	// DeleteIpFromBlacklist .
	DeleteIpFromBlacklist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*Response, error)
	// GetWhiteList .
	GetIpList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type aBFGuardServiceClient struct {
	cc *grpc.ClientConn
}

func NewABFGuardServiceClient(cc *grpc.ClientConn) ABFGuardServiceClient {
	return &aBFGuardServiceClient{cc}
}

func (c *aBFGuardServiceClient) Authorisation(ctx context.Context, in *AuthorisationRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ABFGuardService/Authorisation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFGuardServiceClient) FlushBucket(ctx context.Context, in *FlushBucketRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ABFGuardService/FlushBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFGuardServiceClient) AddIpToWhitelist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ABFGuardService/AddIpToWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFGuardServiceClient) DeleteIpFromWhitelist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ABFGuardService/DeleteIpFromWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFGuardServiceClient) AddIpToBlacklist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ABFGuardService/AddIpToBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFGuardServiceClient) DeleteIpFromBlacklist(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ABFGuardService/DeleteIpFromBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFGuardServiceClient) GetIpList(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/ABFGuardService/GetIpList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ABFGuardServiceServer is the server API for ABFGuardService service.
type ABFGuardServiceServer interface {
	// Authorisation .
	Authorisation(context.Context, *AuthorisationRequest) (*Response, error)
	// FlashBucket .
	FlushBucket(context.Context, *FlushBucketRequest) (*Response, error)
	// AddIpToWhitelist .
	AddIpToWhitelist(context.Context, *SubnetRequest) (*Response, error)
	// DeleteIpFromWhitelist .
	DeleteIpFromWhitelist(context.Context, *SubnetRequest) (*Response, error)
	// AddIpToBlacklist .
	AddIpToBlacklist(context.Context, *SubnetRequest) (*Response, error)
	// DeleteIpFromBlacklist .
	DeleteIpFromBlacklist(context.Context, *SubnetRequest) (*Response, error)
	// GetWhiteList .
	GetIpList(context.Context, *ListRequest) (*ListResponse, error)
}

// UnimplementedABFGuardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedABFGuardServiceServer struct {
}

func (*UnimplementedABFGuardServiceServer) Authorisation(ctx context.Context, req *AuthorisationRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorisation not implemented")
}
func (*UnimplementedABFGuardServiceServer) FlushBucket(ctx context.Context, req *FlushBucketRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushBucket not implemented")
}
func (*UnimplementedABFGuardServiceServer) AddIpToWhitelist(ctx context.Context, req *SubnetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIpToWhitelist not implemented")
}
func (*UnimplementedABFGuardServiceServer) DeleteIpFromWhitelist(ctx context.Context, req *SubnetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpFromWhitelist not implemented")
}
func (*UnimplementedABFGuardServiceServer) AddIpToBlacklist(ctx context.Context, req *SubnetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIpToBlacklist not implemented")
}
func (*UnimplementedABFGuardServiceServer) DeleteIpFromBlacklist(ctx context.Context, req *SubnetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIpFromBlacklist not implemented")
}
func (*UnimplementedABFGuardServiceServer) GetIpList(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpList not implemented")
}

func RegisterABFGuardServiceServer(s *grpc.Server, srv *grpc2.ABFGServer) {
	s.RegisterService(&_ABFGuardService_serviceDesc, srv)
}

func _ABFGuardService_Authorisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFGuardServiceServer).Authorisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFGuardService/Authorisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFGuardServiceServer).Authorisation(ctx, req.(*AuthorisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFGuardService_FlushBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFGuardServiceServer).FlushBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFGuardService/FlushBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFGuardServiceServer).FlushBucket(ctx, req.(*FlushBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFGuardService_AddIpToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFGuardServiceServer).AddIpToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFGuardService/AddIpToWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFGuardServiceServer).AddIpToWhitelist(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFGuardService_DeleteIpFromWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFGuardServiceServer).DeleteIpFromWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFGuardService/DeleteIpFromWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFGuardServiceServer).DeleteIpFromWhitelist(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFGuardService_AddIpToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFGuardServiceServer).AddIpToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFGuardService/AddIpToBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFGuardServiceServer).AddIpToBlacklist(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFGuardService_DeleteIpFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFGuardServiceServer).DeleteIpFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFGuardService/DeleteIpFromBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFGuardServiceServer).DeleteIpFromBlacklist(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFGuardService_GetIpList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFGuardServiceServer).GetIpList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFGuardService/GetIpList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFGuardServiceServer).GetIpList(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ABFGuardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ABFGuardService",
	HandlerType: (*ABFGuardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorisation",
			Handler:    _ABFGuardService_Authorisation_Handler,
		},
		{
			MethodName: "FlushBucket",
			Handler:    _ABFGuardService_FlushBucket_Handler,
		},
		{
			MethodName: "AddIpToWhitelist",
			Handler:    _ABFGuardService_AddIpToWhitelist_Handler,
		},
		{
			MethodName: "DeleteIpFromWhitelist",
			Handler:    _ABFGuardService_DeleteIpFromWhitelist_Handler,
		},
		{
			MethodName: "AddIpToBlacklist",
			Handler:    _ABFGuardService_AddIpToBlacklist_Handler,
		},
		{
			MethodName: "DeleteIpFromBlacklist",
			Handler:    _ABFGuardService_DeleteIpFromBlacklist_Handler,
		},
		{
			MethodName: "GetIpList",
			Handler:    _ABFGuardService_GetIpList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/abf-guard.proto",
}

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/interfaces/db/storage.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorageProcessor is a mock of StorageProcessor interface
type MockStorageProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockStorageProcessorMockRecorder
}

// MockStorageProcessorMockRecorder is the mock recorder for MockStorageProcessor
type MockStorageProcessorMockRecorder struct {
	mock *MockStorageProcessor
}

// NewMockStorageProcessor creates a new mock instance
func NewMockStorageProcessor(ctrl *gomock.Controller) *MockStorageProcessor {
	mock := &MockStorageProcessor{ctrl: ctrl}
	mock.recorder = &MockStorageProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageProcessor) EXPECT() *MockStorageProcessorMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockStorageProcessor) Add(arg0 context.Context, arg1 string, arg2 bool) error {
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockStorageProcessorMockRecorder) Add(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStorageProcessor)(nil).Add), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockStorageProcessor) Delete(arg0 context.Context, arg1 string, arg2 bool) error {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageProcessorMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageProcessor)(nil).Delete), arg0, arg1, arg2)
}

// GetIPList mocks base method
func (m *MockStorageProcessor) GetIPList(arg0 context.Context, arg1 bool) ([]string, error) {
	ret := m.ctrl.Call(m, "GetIPList", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPList indicates an expected call of GetIPList
func (mr *MockStorageProcessorMockRecorder) GetIPList(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPList", reflect.TypeOf((*MockStorageProcessor)(nil).GetIPList), arg0, arg1)
}

// GreenLightPass mocks base method
func (m *MockStorageProcessor) GreenLightPass(arg0 context.Context, arg1 string) error {
	ret := m.ctrl.Call(m, "GreenLightPass", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GreenLightPass indicates an expected call of GreenLightPass
func (mr *MockStorageProcessorMockRecorder) GreenLightPass(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GreenLightPass", reflect.TypeOf((*MockStorageProcessor)(nil).GreenLightPass), arg0, arg1)
}

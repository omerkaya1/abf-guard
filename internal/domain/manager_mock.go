// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/bucket/manager.go

// Package bucket is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManageController is a mock of ManageController interface
type MockManageController struct {
	ctrl     *gomock.Controller
	recorder *MockManageControllerMockRecorder
}

// MockManageControllerMockRecorder is the mock recorder for MockManageController
type MockManageControllerMockRecorder struct {
	mock *MockManageController
}

// NewMockManageController creates a new mock instance
func NewMockManageController(ctrl *gomock.Controller) *MockManageController {
	mock := &MockManageController{ctrl: ctrl}
	mock.recorder = &MockManageControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManageController) EXPECT() *MockManageControllerMockRecorder {
	return m.recorder
}

// Dispatch mocks base method
func (m *MockManageController) Dispatch(login, pwd, ip string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", login, pwd, ip)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dispatch indicates an expected call of Dispatch
func (mr *MockManageControllerMockRecorder) Dispatch(login, pwd, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockManageController)(nil).Dispatch), login, pwd, ip)
}

// FlushBuckets mocks base method
func (m *MockManageController) FlushBuckets(login, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushBuckets", login, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushBuckets indicates an expected call of FlushBuckets
func (mr *MockManageControllerMockRecorder) FlushBuckets(login, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushBuckets", reflect.TypeOf((*MockManageController)(nil).FlushBuckets), login, ip)
}

// PurgeBucket mocks base method
func (m *MockManageController) PurgeBucket(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeBucket", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeBucket indicates an expected call of PurgeBucket
func (mr *MockManageControllerMockRecorder) PurgeBucket(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeBucket", reflect.TypeOf((*MockManageController)(nil).PurgeBucket), name)
}

// GetErrChan mocks base method
func (m *MockManageController) GetErrChan() chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrChan")
	ret0, _ := ret[0].(chan error)
	return ret0
}

// GetErrChan indicates an expected call of GetErrChan
func (mr *MockManageControllerMockRecorder) GetErrChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrChan", reflect.TypeOf((*MockManageController)(nil).GetErrChan))
}

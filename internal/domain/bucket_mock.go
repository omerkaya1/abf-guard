// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/bucket/bucket.go

// Package bucket is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBucketer is a mock of Bucketer interface
type MockBucketer struct {
	ctrl     *gomock.Controller
	recorder *MockBucketerMockRecorder
}

// MockBucketerMockRecorder is the mock recorder for MockBucketer
type MockBucketerMockRecorder struct {
	mock *MockBucketer
}

// NewMockBucketer creates a new mock instance
func NewMockBucketer(ctrl *gomock.Controller) *MockBucketer {
	mock := &MockBucketer{ctrl: ctrl}
	mock.recorder = &MockBucketerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBucketer) EXPECT() *MockBucketerMockRecorder {
	return m.recorder
}

// Decrement mocks base method
func (m *MockBucketer) Decrement() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrement")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Decrement indicates an expected call of Decrement
func (mr *MockBucketerMockRecorder) Decrement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrement", reflect.TypeOf((*MockBucketer)(nil).Decrement))
}

// GetCount mocks base method
func (m *MockBucketer) GetCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCount indicates an expected call of GetCount
func (mr *MockBucketerMockRecorder) GetCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockBucketer)(nil).GetCount))
}

// Stop mocks base method
func (m *MockBucketer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockBucketerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBucketer)(nil).Stop))
}
